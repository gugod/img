#!/usr/bin/env perl
use v5.18;
use FindBin;
use lib "$FindBin::Bin/../lib";

use Getopt::Std;
use Elastijk;
use Parallel::ForkManager;

use Img;
use Img::SlidingWindow;

my $file = $ARGV[0] or die;
my $img = Img->new( file => $file ) or die Img->errstr;

my $es = Elastijk->new( host => "localhost", port => "9200" );

my $forkman = Parallel::ForkManager->new(2);

my ($w, $h) = (8,8);
for my $offset_top (0..7) {
    for my $offset_left (0..7) {
        my $hashgrid = {};
        my $iter = Img::SlidingWindow->new(
            image  => $img,
            width  => $w,
            height => $h,
            step   => $w,
            offset_top => $offset_top,
            offset_left => $offset_left,
        );
        $iter->reset;
        while (my $item = $iter->next()) {
            my $p = $item->patch;
            next if $p->looks_boring;

            my $hash = $p->average_hash;
            next if $hash == 0;

            my $hash_hex = sprintf("%016x", $hash);
            my $geo = $w . "x" . $h . "+" . $item->left . "+" . $item->top;
            my $l = $item->left / $w;
            my $t = $item->top / $h;
            $hashgrid->{$l}{$t} = {
                geo  => $geo,
                hash_hex => $hash_hex
            }
        }

        $forkman->start and next;
        for my $l (keys %$hashgrid) {
            for my $t (keys %{$hashgrid->{$l}}) {
                my $o = $hashgrid->{$l}{$t} or next;

                my $geo = $o->{geo};
                my $hash_hex = $o->{hash_hex};
                my ($status, $res) = $es->put(
                    index => "img",
                    type => "patch",
                    id => "${file}#${geo}",
                    body => {
                        file => $file,
                        geometry => $geo,
                        average_hash => $hash_hex,
                        neighbours => [
                            map { $hashgrid->{$_->[0]}{$_->[1]}{hash_hex} } grep { exists($hashgrid->{$_->[0]}{$_->[1]}) } (
                                [$l-1, $t-1],
                                [$l-1, $t],
                                [$l-1, $t+1],
                                [$l,   $t-1],
                                [$l,   $t+1],
                                [$l+1, $t-1],
                                [$l+1, $t],
                                [$l+1, $t+1],
                            )
                        ],
                    }
                );
                if (substr($status,0,1) ne '2') {
                    die "ES DEAD: (status = $status) : " . $Elastijk::JSON->encode([ $res ]);
                } else {
                    say "Done: $hash_hex <= $geo ";
                }        
            }
        }
        $forkman->finish;
    }
}

$forkman->wait_all_children;
