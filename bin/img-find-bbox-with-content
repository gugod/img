#!/usr/bin/env perl

=head1 Process

Do one of these:

    convert $input -brightness-contrast 0x100%  -threshold 75% -type bilevel $output

Run:

    img-find-bbox-with-content $input var/out/

Run tesserract:

    find var/out/ -name '*.png' | parallel -j2 tesseract -psm 10 -l chi_tra {} {.}

=cut

use v5.18;
use Imager;
use Parallel::ForkManager;
use File::Path qw(make_path);
use Getopt::Long;

sub main {
    my ($options, $input, $output) = @_;
    make_path($output) unless -d $output;

    my $img = Imager->new( file => $input );
    my %seen;
    iterate_over_all_bbox(
        $options,
        $img->getwidth,
        $img->getheight,
        sub {
            my ($x,$y,$w,$h) = @_;
            return unless (all_white($img->getscanline( x => $x, y => $y, width => $w )));
            return unless (all_white($img->getscanline( x => $x, y => $y+$h-1, width => $w )));
            return unless (all_white($img->getpixel( x => $x, y => [$y..($y+$h-1)] )));
            return unless (all_white($img->getpixel( x => $x+$w-1, y => [$y..($y+$h-1)] )));

            my $p = $img->crop( left => $x, right => $x+$w-1, top => $y, bottom => $y+$h-1 );
            my @c = map { ($p->getscanline( x => 0, y => $_ )) } 0..$h;

            return if mostly_white(@c);

            my ($p2, $shave) = trim_white_edge($p);
            my ($w2,$h2) = ($p2->getwidth, $p2->getheight);
            my $x2 = $x + $shave->{left};
            my $y2 = $y + $shave->{top};

            my $k = join("-", $x2, $y2, $w2, $h2);
            unless ( $seen{$k} ) {
                $seen{$k} = 1;
                my $dir = "$output/$y2";
                make_path($dir) unless -d $dir;

                unless (-f "$dir/bbox-$k.png") {
                    $p2->write( file => "$dir/bbox-$k.png" );
                    return ($x2,$y2,$w2,$h2);
                }
            }
            return;
        }
    );
}

my $opts = {};
GetOptions($opts, "dimension=n");
main($opts, @ARGV);

sub all_white {
    my (@colors) = @_;
    return @colors == 0+(grep { defined($_) && ($_->rgba)[0] == 255 } @colors);
}

sub mostly_white {
    my (@colors) = @_;
    my $threshold = (@colors < 100) ? (0+@colors) : (0.99 * @colors);
    return $threshold < 0+(grep { defined($_) && ($_->rgba)[0] == 255 } @colors);
}

sub trim_white_edge {
    my $original_image = shift;
    my $image = $original_image->copy;
    my $box = { top => 0, bottom => 0, left => 0, right => 0 };
    my $white = Imager::Color->new("#FFFFFF");
    my $trim = {};

    for my $side ("top", "left", "bottom", "right") {
        my $shave = 0;
        my ($width, $height) = ($image->getwidth, $image->getheight);

        while($shave < $height) {
            my @colors = $image->getscanline(y => $shave);
            my @white = grep { ($_->rgba)[0] == 255 } @colors;
            last if @white < @colors;
            $shave++;
        }
        if ($shave != 0 && $shave < $height) {
            $trim->{$side} = $shave;
            $image = $image->crop(top => $shave);
        }
        $image = $image->rotate(degrees=>90);
    }

    return ($image, $trim);
}


sub iterate_over_all_bbox {
    my ($options, $img_width, $img_height, $cb) = @_;

    my @dimension;
    if ($options->{dimension}) {
        @dimension = ($options->{dimension});
    } else {
        @dimension = reverse map { $_ * 50 } 1..7; # 50..350 by 50
    }

    my $NPROC = 4;
    my $forkman = Parallel::ForkManager->new( $NPROC );

    my $rows_per_proc = $img_height / $NPROC;
    my $orig_0 = $0;
    for my $proc (0..$NPROC-1) {
        $forkman->start and next;

        my $min_y = $proc * $rows_per_proc;
        my $max_y = $min_y + $rows_per_proc;

        for my $w (@dimension) {
            for my $h ( @dimension ) {
                for (my $y = $min_y; $y < $max_y-$h; $y += 5) {
                    for (my $x = 0; $x < $img_width-$w; $x += 5) {
                        $0 = "$orig_0 - $x, $y, $w, $h";
                        if ( my @bbox = $cb->($x,$y,$w,$h) ) {
                            $x = $bbox[0] + $bbox[2];
                        }
                    }
                }
            }
        }
        $forkman->finish;
    }

    $forkman->wait_all_children;
}
